/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type RequestMethodType = "DELETE" | "GET" | "PATCH" | "POST" | "PUT";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface _LogHttpRequestError {
  endpoint: string;
  error: string | null;
  id: Generated<number>;
  message: string | null;
  method: RequestMethodType;
  payload: Json | null;
  requested_at: Generated<Timestamp>;
  requested_by: number | null;
  respond_time: number;
  responded_at: Timestamp;
  status: number | null;
}

export interface _LogHttpRequestRaw {
  endpoint: string;
  id: Generated<number>;
  message: string | null;
  method: RequestMethodType;
  payload: Json | null;
  requested_at: Generated<Timestamp>;
  requested_by: number | null;
  respond_time: number;
  responded_at: Timestamp;
  status: number | null;
}

export interface AudioUpload {
  created_at: Generated<Timestamp>;
  duration: number;
  file_format: string;
  id: Generated<number>;
  s3_key: string;
  s3_url: string;
  updated_at: Generated<Timestamp>;
  user_id: number;
}

export interface User {
  created_at: Generated<Timestamp>;
  email: string;
  id: Generated<number>;
  password: string;
  role: string;
  updated_at: Generated<Timestamp>;
  username: string;
}

export interface DB {
  _log_http_request_error: _LogHttpRequestError;
  _log_http_request_raw: _LogHttpRequestRaw;
  audio_upload: AudioUpload;
  user: User;
}
